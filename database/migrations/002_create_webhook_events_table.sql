-- Migration: Create webhook_events table for persistent webhook logging
-- Description: Replaces in-memory webhook event storage with database persistence
-- Date: 2025-01-XX
-- Author: Claude Code Refactor

-- Create webhook_events table
CREATE TABLE IF NOT EXISTS webhook_events (
  -- Primary key
  id TEXT PRIMARY KEY,

  -- Event metadata
  type TEXT NOT NULL,
  timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),

  -- Event data (stores the raw webhook payload)
  data JSONB,

  -- Processing information
  processing JSONB,

  -- Additional metadata
  metadata JSONB,

  -- Indexing for common queries
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for efficient querying
CREATE INDEX IF NOT EXISTS idx_webhook_events_type ON webhook_events(type);
CREATE INDEX IF NOT EXISTS idx_webhook_events_timestamp ON webhook_events(timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_webhook_events_created_at ON webhook_events(created_at DESC);

-- Index for filtering by athlete_id (stored in data JSONB)
CREATE INDEX IF NOT EXISTS idx_webhook_events_athlete_id ON webhook_events((data->>'owner_id'));

-- Index for filtering by processing status
CREATE INDEX IF NOT EXISTS idx_webhook_events_status ON webhook_events((processing->>'status'));

-- Add comment to table
COMMENT ON TABLE webhook_events IS 'Stores webhook events from Strava for debugging and monitoring';

-- Add comments to columns
COMMENT ON COLUMN webhook_events.id IS 'Unique identifier generated by the webhook logger';
COMMENT ON COLUMN webhook_events.type IS 'Event type: validation, webhook, etc.';
COMMENT ON COLUMN webhook_events.data IS 'Raw event data from Strava webhook';
COMMENT ON COLUMN webhook_events.processing IS 'Processing status, duration, errors, etc.';
COMMENT ON COLUMN webhook_events.metadata IS 'Additional metadata: request headers, activity data, database operations, etc.';

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_webhook_events_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to auto-update updated_at
CREATE TRIGGER trigger_update_webhook_events_updated_at
  BEFORE UPDATE ON webhook_events
  FOR EACH ROW
  EXECUTE FUNCTION update_webhook_events_updated_at();

-- Optional: Create a view for easy stats querying
CREATE OR REPLACE VIEW webhook_events_stats AS
SELECT
  type,
  processing->>'status' as status,
  COUNT(*) as count,
  AVG((processing->>'duration')::numeric) as avg_duration_ms,
  MIN(timestamp) as oldest_event,
  MAX(timestamp) as newest_event
FROM webhook_events
GROUP BY type, processing->>'status';

COMMENT ON VIEW webhook_events_stats IS 'Aggregated statistics for webhook events';
